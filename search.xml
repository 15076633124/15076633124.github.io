<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端面试题</title>
      <link href="/2023/04/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/04/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<img src="/images/git.png"  /><span id="more"></span><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h4 id="Vue3-0和Vue2-0的区别"><a href="#Vue3-0和Vue2-0的区别" class="headerlink" title="Vue3.0和Vue2.0的区别"></a>Vue3.0和Vue2.0的区别</h4><h5 id="响应式原理的变化"><a href="#响应式原理的变化" class="headerlink" title="响应式原理的变化"></a>响应式原理的变化</h5><ul><li>vue2的响应式原理是采用的 Object.defineProperty()方法对数据进行的劫持和发布订阅者模式的方式进行实现的。</li><li>Vue3则是用 es6 的 proxy 对数据进行代理，通过 reactive() 函数给每一个对象包一层 proxy，通过 Proxy 监听属性的变化来实现对数据的监控</li></ul><blockquote><p>Proxy的优点：可以直接监听对象的 添加删除属性，也可以直接监听数组的变化且 Proxy监听的是目标对象本身，不需要和 Object.defienProperty那样遍历每个属性，有一定的性能提升</p></blockquote><h5 id="数据和方法的定义改变"><a href="#数据和方法的定义改变" class="headerlink" title="数据和方法的定义改变"></a>数据和方法的定义改变</h5><ul><li><p>Vue2使用的是选项型API,Vue3使用的是组合式API</p><blockquote><p>vue2的选项型API是在代码中分割成了不同的几个属性，如：data,computed,methods等。vue3的组合式API改变了这一点，利用了 function 来进行分割，使得代码看起来更加清晰简洁</p></blockquote></li><li><p>Vue3里利用setup函数作为属性和方法的入口</p></li></ul><h5 id="Vue2-0和Vue3-0的生命周期钩子的对应关系"><a href="#Vue2-0和Vue3-0的生命周期钩子的对应关系" class="headerlink" title="Vue2.0和Vue3.0的生命周期钩子的对应关系"></a>Vue2.0和Vue3.0的生命周期钩子的对应关系</h5><ul><li>beforeCreate 对应 setup()</li><li>create 对应 setup()</li><li>beforeMount 对应 onBeforeMount</li><li>mounted 对应 onMounted</li><li>beforeUpdate 对应 onBeforeUpdate</li><li>update 对应 onUpdate</li><li>beforeUnmount 对应 onBeforeUnmount</li><li>unmounted 对应 onUnmounted</li></ul><h5 id="Vue3移除了什么"><a href="#Vue3移除了什么" class="headerlink" title="Vue3移除了什么"></a>Vue3移除了什么</h5><ul><li>移除了 keyCode键盘的修饰符、.native修饰符、filter过滤器</li><li>不再建议使用mixins，因为组合式函数本身就是 mixin 更好的代替</li></ul><h3 id="Vue3-0带来了什么改变？"><a href="#Vue3-0带来了什么改变？" class="headerlink" title="Vue3.0带来了什么改变？"></a>Vue3.0带来了什么改变？</h3><ol><li>性能的提升（打包大小减少，初次渲染速度及更新渲染速度和内存的减少等……）</li><li>使用 proxy 代替 defineProperty 实现响应式，重写了 虚拟 DOM 的实现等……</li><li>Vue3.0 更好的支持 TypeScript</li><li>Vue3.0 采用了组合式 API （setup的配置）其中有 ref 与 reactive、watch 与 watchEffect、provide 与 inject 等。</li><li>Vue3.0新增了内置组件（Fragment，teleport,Suspense）</li><li>新的生命周期钩子、data选项始终被生命为一个函数、移除keyCode等。</li><li>Vue3.0的样式穿透 :deep取代了之前的 &#x2F;deep&#x2F; 和 ::v-deep</li></ol><h3 id="Vue3-0的响应式原理"><a href="#Vue3-0的响应式原理" class="headerlink" title="Vue3.0的响应式原理"></a>Vue3.0的响应式原理</h3><ul><li>通过 Proxy 代理拦截对象中属性的变化。（属性值的读写、属性的添加和删除等功能）</li><li>通过 Reflect 反射 对源对象的属性进行操作</li></ul><h3 id="Vue3有哪些响应判断函数？"><a href="#Vue3有哪些响应判断函数？" class="headerlink" title="Vue3有哪些响应判断函数？"></a>Vue3有哪些响应判断函数？</h3><blockquote><p>isRef、isReactive、isReadonly、isProxy这些响应判断函数</p></blockquote><ul><li>isRef 可以检查一个值是否是一个 ref 对象</li><li>isReactive 可以检查一个对象是否是 reactive 创建的响应式代理对象</li><li>isReadonly 可以检查一个对象是否是 readonly  创建的只读代理对象</li><li>isProxy 可以检查一个对象是否是 reactive 或 readonly 方法创建的代理对象</li></ul><h3 id="ref-和-reactive-的区别"><a href="#ref-和-reactive-的区别" class="headerlink" title="ref 和 reactive 的区别"></a>ref 和 reactive 的区别</h3><ul><li>ref通常是用来定义 基本数据类型 的，reactive是用来定义 对象或者数组这些类型的</li></ul><blockquote><p>ref也可以用来定义对象或者数组类型，它内部会自动通过 reactive 转换为代理对象</p></blockquote><ul><li>ref 操作数据需要 .value 取值，template模板中不需要 .value。reactive 都不需要 .value进行取值</li><li>解构赋值的情况下 reactive 会丢失响应，ref不会</li><li>ref是通过 Object.defineProperty() 的 get 和 set 实现的响应式。reactive 通过 Proxy实现的响应式，并且通过 Reflect 操作源对象内部的数据</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="JavaScript-有哪些数据类型，它们的区别？"><a href="#JavaScript-有哪些数据类型，它们的区别？" class="headerlink" title="JavaScript 有哪些数据类型，它们的区别？"></a>JavaScript 有哪些数据类型，它们的区别？</h3><ul><li>JavaScript共有八种数据类型，分别是 Undefiend、Null、Boolean、Number、String、Object、Symbol、BigInt。<ul><li>Symbol 和 BigInt 是 ES6 新增的数据类型<ul><li>Symbol  类型 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突问题</li><li>BigInt 类型 是一种数字类型的数据，它可以表示任意精度格式的整数，它可以安全地存储和操作大整数，即使这个数已经超过了 Number 能够表示的安全整数范围。</li></ul></li><li>基本数据类型（栈）<ul><li>Undefined、Null、Boolean、Number、String</li></ul></li><li>引用数据类型（堆）<ul><li>Object,Array,function</li></ul></li></ul></li></ul><h3 id="数据类型的检测方式有哪些？"><a href="#数据类型的检测方式有哪些？" class="headerlink" title="数据类型的检测方式有哪些？"></a>数据类型的检测方式有哪些？</h3><ol><li><p>typeof</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">2</span>); <span class="comment">// number</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">// boolean</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;string&#x27;</span>); <span class="comment">// string</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;) <span class="comment">// function</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>) <span class="comment">// undefined</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;) <span class="comment">// object</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []); <span class="comment">// object</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><ul><li>除了数组对象和null都会被判断为object，其他判断都正确</li></ul></li><li><p>instanceof </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>); <span class="comment">// false</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>); <span class="comment">// false</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;string&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">// false</span></span><br><span class="line">   </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Function</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>正确判断对象的类型，其内部运行机制是在判断原型链中是否能找到该类型的原型</li><li>它只能判断引用数据类型，不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性</li></ul></li><li><p>constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">2</span>).<span class="property">constructor</span> === <span class="title class_">Number</span>); <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">true</span>).<span class="property">constructor</span> === <span class="title class_">Boolean</span>); <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">&#x27;str&#x27;</span>).<span class="property">constructor</span> === <span class="title class_">String</span>); <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(([]).<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;).<span class="property">constructor</span> === <span class="title class_">Function</span>); <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>((&#123;&#125;).<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>它有两个作用，一是判断数据的类型，二是对象实例通过 constructor 对象访问它的构造函数。需要注意的是，如果创建一个对象来改变它的原型，constructor 就不能用来判断数据类型了：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="property">constructor</span> === <span class="title class_">Fn</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="property">constructor</span> === <span class="title class_">Array</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Null-和-Undefined-的区别"><a href="#Null-和-Undefined-的区别" class="headerlink" title="Null 和 Undefined 的区别"></a>Null 和 Undefined 的区别</h3><ul><li>Undefined 和 Null 都是基本数据类型，这两个基本数据类型的值分别是 undefined 和 null<ul><li>Undefined 代表的是未定义，null 代表的是空对象。一般变量声明了但还没有定义时候会返回undefined，null主要用于赋值给一些可能返回对象的变量，作为初始化</li></ul></li></ul><h3 id="Object-is-与-比较操作符-x3D-x3D-x3D-、-x3D-x3D-的区别"><a href="#Object-is-与-比较操作符-x3D-x3D-x3D-、-x3D-x3D-的区别" class="headerlink" title="Object.is() 与 比较操作符 &#x3D;&#x3D;&#x3D;、 &#x3D;&#x3D; 的区别"></a>Object.is() 与 比较操作符 &#x3D;&#x3D;&#x3D;、 &#x3D;&#x3D; 的区别</h3><ul><li>使用双等（&#x3D;&#x3D;）进行相等判断时，如果两边的类型不一致，则会进行强制类型转换后进行比较。</li><li>使用三等（&#x3D;&#x3D;&#x3D;）进行相等判断时，如果两边的类型不一致，不会进行强制类型转换，直接返回false</li><li>Object.is()进行相等判断时，一般情况下和三等号的判断相同。它处理了一些特殊情况，比如 -0 和 +0 不再相等，两个NAN是相等的</li></ul><h3 id="如何判断一个对象是空对象"><a href="#如何判断一个对象是空对象" class="headerlink" title="如何判断一个对象是空对象"></a>如何判断一个对象是空对象</h3><ul><li>使用 JSON.stringify 方法判断：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) == <span class="string">&quot;&#123;&#125;&quot;</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;空对象&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 ES6 新增的方法 Object.keys() 判断：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span> &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;空对象&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="箭头函数的-this-指向哪里？"><a href="#箭头函数的-this-指向哪里？" class="headerlink" title="箭头函数的 this 指向哪里？"></a>箭头函数的 this 指向哪里？</h4><ul><li>箭头函数没有属于自己的 this，它所谓的 this 是捕获其所在的上下文的 this 值，作为自己的 this 值，并且因为没有自己的 this，所以是不会被 new 调用的。这个所谓的 this 也不会被改变</li></ul><h3 id="扩展运算符的作用及使用场景"><a href="#扩展运算符的作用及使用场景" class="headerlink" title="扩展运算符的作用及使用场景"></a>扩展运算符的作用及使用场景</h3><ol><li><p>对象扩展运算符</p><ul><li>对象的扩展运算符（…）用于取出参数对象中的所有可遍历属性，拷贝到当前对象中</li></ul><blockquote><p>注意点：扩展运算符对对象实例的拷贝属于浅拷贝</p></blockquote></li><li><p>数组扩展运算符</p><ul><li>数组的扩展运算符可以将一个数组转换为用逗号分隔的参数，且每次只能展开一层</li></ul></li><li><p>数组扩展运算符的应用：</p><ol><li>将数组转换为参数序列</li><li>复制数组</li><li>合并数组</li></ol></li></ol><ul><li><p>常见的应用场景是可以将某些数据结构转为数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arguments对象</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于替换 es5 中的 Array.prototype.slice.call(arguments)写法。</span></span><br></pre></td></tr></table></figure></li><li><p>使用 Math 函数获取数组中特定的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">9</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(...numbers) <span class="comment">// 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...numbers) <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Proxy-可以实现什么功能"><a href="#Proxy-可以实现什么功能" class="headerlink" title="Proxy 可以实现什么功能"></a>Proxy 可以实现什么功能</h3><blockquote><p>在 Vue3.0 中通过 Proxy 来替换原本的 Object.defineProperty 来实现数据响应式</p></blockquote><h3 id="什么是-DOM-和-BOM？"><a href="#什么是-DOM-和-BOM？" class="headerlink" title="什么是 DOM 和 BOM？"></a>什么是 DOM 和 BOM？</h3><ul><li>DOM 指的是文档对象模型，它指的是把文档看成一个对象，这个对象主要定义了处理网页内容的方法和接口</li><li>BOM 指的是浏览器对象模型，它指的是把浏览器当成一个对象，这个对象主要定义了与浏览器进行交互的方法和接口</li></ul><h3 id="ES6-模块与-CommonJs-模块有什么异同？"><a href="#ES6-模块与-CommonJs-模块有什么异同？" class="headerlink" title="ES6 模块与 CommonJs 模块有什么异同？"></a>ES6 模块与 CommonJs 模块有什么异同？</h3><ul><li>ES6 Module 和 CommonJS 模块的区别<ul><li>CommonJs 是对模块的浅拷贝，ES6 Module 是对模块的引用，ES6 Module 只存只读，不能改变其值，也就是指针指向不能改变，类似 const；import 的接口是 read-only（只读状态），不能修改其变量值。即不能修改其变量的指针方法，但可以改变变量内部指针指向，可以对 commonjs 对重新赋值（改变指针指向），但对 ES6 Module 赋值会编译报错</li></ul></li><li>共同点<ul><li>Commonjs 和 ES6 Module 都可以对引入的对象进行赋值，即对对象内部属性的值进行改变。</li></ul></li></ul><h3 id="for…in-和-for…of-的区别"><a href="#for…in-和-for…of-的区别" class="headerlink" title="for…in 和 for…of 的区别"></a><strong>for…in 和 for…of 的区别</strong></h3><blockquote><p>for…in 循环主要是为了遍历对象而生，不适用于遍历数组；for…of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p></blockquote><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><h4 id="什么是Http协议？"><a href="#什么是Http协议？" class="headerlink" title="什么是Http协议？"></a>什么是Http协议？</h4><ul><li>Http协议是超文本传输协议，本身是tcp&#x2F;ip协的一个子集，在五层协议中位于应用层，三次握手，dns协议</li></ul><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><blockquote><p>其实就是指建立一个 TCP 连接时，需要客户端和服务器总共发送 3 个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。</p></blockquote><ul><li><strong>第一次握手</strong>：客户端向服务端发包，服务端成功接收，服务端就能确认：服务端的接收和客户端的发送都没有问题</li><li><strong>第二次握手</strong>：服务端向客户端发包，客户端成功接收，客户端就可以确认：客户端的发送和接收能力、服务端的发送和接收能力都是没问题的</li><li>第三次握手：客户端发包，结束通信，服务端成功收到，服务端就可以确认：服务端的接收能力和发送能力；客户端的接收能力和发送能力都没有问题。</li></ul><blockquote><p>双方确认了自己的接收、发送能力是正常安全的后就可以正常进行通信了</p></blockquote><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><ul><li>第一次挥手：客户端发起关闭连接的请求给服务端</li><li>第二次挥手：服务端收到关闭请求时可能数据还没有发送完，所以服务端会先回复一个确认报文，表示自己知道客户端想关闭连接了，但是可能数据还没传输完毕，所以还需要等待</li><li>第三次挥手：当数据传输完事了，服务端还会主动发送一个报文（FIN），告诉客户端，表示数据发送完了，服务端这边准备关闭连接了</li><li>第四次挥手：当客户端收到服务端的报文（FIN）报文后，会回复一个报文（ACK），告诉服务端我知道了，再等待一会就关闭连接</li></ul><h4 id="http的请求方法及用途"><a href="#http的请求方法及用途" class="headerlink" title="http的请求方法及用途"></a>http的请求方法及用途</h4><ul><li>GET方法：发送一个请求来取得服务器上的某一资源</li><li>POST方法：向URL指定的资源提交数据或附加新的数据</li><li>PUT方法：跟POST方法比较像，也是向服务器提交数据。但是，它们之间是有不同的。PUT指定了资源在服务器上的位置，POST没有</li><li>DELETE方法：删除服务器上的某资源</li></ul><h4 id="post和get请求的区别"><a href="#post和get请求的区别" class="headerlink" title="post和get请求的区别"></a>post和get请求的区别</h4><ul><li>post请求的安全性会更高一些，比如不会作为url的一部分，也不会被缓存、它是保存在服务器的日志和浏览器记录中，get请求的是静态资源，所以会存在缓存。如果请求的是数据，就不会缓存</li><li>post请求发送的数据也会更大，get请求有url长度限制。</li><li>post请求能发送更多的数据类型</li><li>传参方式也不同（get请求参数是通过url拼接传递的，post请求是在body中进行传递</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this优先级</title>
      <link href="/2023/04/23/this%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2023/04/23/this%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<img src="/images/this背景.jpg"  /><span id="more"></span><h2 id="this优先级"><a href="#this优先级" class="headerlink" title="this优先级"></a>this优先级</h2><h3 id="显示绑定高于隐式绑定"><a href="#显示绑定高于隐式绑定" class="headerlink" title="显示绑定高于隐式绑定"></a>显示绑定高于隐式绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.call/apply的显示绑定高于隐式绑定</span></span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">apply</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// abc</span></span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">call</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.bind的优先级高于隐式绑定</span></span><br><span class="line"><span class="keyword">var</span> bar = obj.<span class="property">foo</span>.<span class="title function_">bind</span>(<span class="string">&quot;cba&quot;</span>)</span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// cba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.更明显的比较</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo.<span class="title function_">bind</span>(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// aaa</span></span><br></pre></td></tr></table></figure><h3 id="new高于隐式绑定和显示绑定"><a href="#new高于隐式绑定和显示绑定" class="headerlink" title="new高于隐式绑定和显示绑定"></a>new高于隐式绑定和显示绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new的优先级高于隐式绑定</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> obj.<span class="title function_">foo</span>() <span class="comment">// foo</span></span><br><span class="line"><span class="keyword">var</span> bar = obj.<span class="property">foo</span>.<span class="title function_">bind</span>(<span class="string">&quot;aaa&quot;</span>) <span class="comment">// foo</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">bar</span>() <span class="comment">// foo</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p><span style="color:#c3b1b1" >new绑定 &gt; 显示绑定(apply&#x2F;call&#x2F;bind) &gt; 隐式绑定(obj.foo()) &gt; 默认绑定(独立函数调用)</span></p></blockquote><h2 id="this特殊绑定"><a href="#this特殊绑定" class="headerlink" title="this特殊绑定"></a>this特殊绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">foo.<span class="title function_">apply</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply/call/bind: 当传入null/undefined时, 自动将this绑定成全局对象</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="literal">null</span>)</span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="literal">undefined</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="title function_">bar</span>()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span></span><br><span class="line">&#125;; <span class="comment">// 代码规范问题，不加分号会认为和最后一行是一个整体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj2.bar = obj1.foo</span></span><br><span class="line"><span class="comment">// obj2.bar()</span></span><br><span class="line"></span><br><span class="line">(obj2.<span class="property">bar</span> = obj1.<span class="property">foo</span>)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> this </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this优先级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖节流的理解及实现</title>
      <link href="/2023/04/21/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/21/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<img src="/images/防抖节流.jpg" /><span id="more"></span>### 防抖：用户频发触发事件，只要最后一次事件的操作<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;input&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">input.<span class="property">oninput</span> = <span class="title function_">antiShake</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,<span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">antiShake</span>(<span class="params">fn,dealy</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> t = <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(t!==<span class="literal">null</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">clearTimeout</span>(t)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    t = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    fn.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,dealy)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="节流则是控制事件高频率触发"><a href="#节流则是控制事件高频率触发" class="headerlink" title="节流则是控制事件高频率触发"></a>节流则是控制事件高频率触发</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;input&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">input.<span class="property">oninput</span> = <span class="title function_">throttle</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,<span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,dealy</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> flag = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(flag)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fn.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          flag = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      flag = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制流处理方式</title>
      <link href="/2023/04/21/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%81/"/>
      <url>/2023/04/21/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<img src="/images/二进制流.png" /><span id="more"></span>### 处理后端接口返回的二进制流<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 接口示例: config参数里传类型（responseType：blob）</span></span><br><span class="line"> <span class="attr">yxExcelExport</span>: <span class="function">(<span class="params">url: string,data: object</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="property">httpObj</span>.<span class="title function_">post</span>(url + <span class="string">&#x27;/v1/excel/yxExcelExport&#x27;</span>,data,&#123;<span class="attr">responseType</span>:  <span class="string">&#x27;blob&#x27;</span>&#125;);</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(res.<span class="property">data</span>) <span class="comment">// 将二进制文件转换为可访问的url</span></span><br><span class="line"> <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line"> a.<span class="property">href</span> = url</span><br><span class="line"> a.<span class="property">download</span> = <span class="string">&#x27;影像数据.xls&#x27;</span> </span><br><span class="line"> a.<span class="title function_">click</span>()</span><br><span class="line"> <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 处理后端接口返回的二进制流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite和webpack的区别</title>
      <link href="/2023/04/21/vite%E4%B8%8Ewebpack%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/04/21/vite%E4%B8%8Ewebpack%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<img src="/images/vite与webpack.jpg"   /><span id="more"></span>## vite<p>一种新型前端构建工具，能够显著提升前端开发体验。它由两部分组成：</p><ul><li>开发服务器：它是基于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ES 模块</a> 提供了  <a href="https://cn.vitejs.dev/guide/features.html">丰富的内建功能</a>，例如  <a href="https://cn.vitejs.dev/guide/features.html#hot-module-replacement">模块热更新（HMR）</a> </li><li>一套构建指令，它基于 <a href="https://rollupjs.org/">Rollup</a> 打包代码，并且是预配置的，可输出于生产环境的高度优化过的静态资源</li></ul><p>Vite 提供开箱即用的配置，同时它的  <a href="https://cn.vitejs.dev/guide/api-plugin.html">插件 API</a>  和 <a href="https://cn.vitejs.dev/guide/api-javascript.html">JavaScript API</a> 带来了高度的可扩展性，并有完整的类型支持。</p><p><img src="/images/vite.png" alt="vite"></p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>本质上，<strong>webpack</strong> 是一个用于现代 JavaScript 应用程序的 <em>静态模块打包工具</em>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 <a href="https://webpack.docschina.org/concepts/dependency-graph/">依赖图(dependency graph)</a>，然后将你项目中所需的每一个模块组合成一个或多个 <em>bundles</em>，它们均为静态资源，用于展示你的内容。</p><p><img src="/images/webpack.png" alt="webpack"></p><h2 id="vite-和-webpack的区别"><a href="#vite-和-webpack的区别" class="headerlink" title="vite 和 webpack的区别"></a>vite 和 webpack的区别</h2><ul><li>vite 是一个快速构建工具，适用于小型项目和快速原型开发。它使用 ES模块作为开发模式，可以快速启动开发服务器，支持热更新和快速构建</li><li>webpack 是一个功能强大的构建工具，适用于大型项目和复杂的构建需求。它可以处理各种类型的文件，支持代码分割、懒加载、优化和压缩等功能，可以满足更多的构建需求</li><li>区别：Vite 和 Webpack都是 JavaScript 应用程序的构建工具，它们的共同目标都是将应用程序源代码转换为可部署的 JavaScript、HTML、CSS。<ul><li>构建方式<ul><li>Vite 是一种 “零配置” 构建工具，使用 Rollup 进行快速的开发环境构建，同时支持基于插件的定制。在开发模式下 Vite 使用 ES modules 来直接引入模块，而不是打包所有代码，因此启动时间非常快。生产模式下，Vite 会对所有模块进行打包和压缩</li><li>webpack 则需要一个配置文件来定义如何构建应用程序</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite和webpack的区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="/2023/04/21/nvm/"/>
      <url>/2023/04/21/nvm/</url>
      
        <content type="html"><![CDATA[<img src="/images/nvm.jpg" /><span id="more"></span>## nvm简介<p>nvm是node包管理工具，不同项目依赖的node会不相同，所以就需要在不同的项目下使用不同node版本</p><p>nvm就是一个比较方便的node管理工具，用来切换node版本</p><h2 id="nvm下载及安装"><a href="#nvm下载及安装" class="headerlink" title="nvm下载及安装"></a>nvm下载及安装</h2><h3 id="nvm下载"><a href="#nvm下载" class="headerlink" title="nvm下载"></a>nvm下载</h3><p>安装包下载地址: <a href="https://github.com/coreybutler/nvm-windows/releases">nvm下载地址</a>,windows系统下载nvm-setup.zip安装包<br><img src="/images/nvm/nvm1.png" alt="nvm"  /></p><h3 id="nvm安装"><a href="#nvm安装" class="headerlink" title="nvm安装"></a>nvm安装</h3><p>如果电脑之前存在node，先进行卸载，再解压nvm-setup.zip安装包，进入解压的文件夹，双击exe后缀文件进行安装</p><img src="/images/nvm/nvm2.png" alt="nvm"  /><p>下面界面选择nvm安装的路径,</p><img src="/images/nvm/nvm3.png" alt="nvm安装" /><p>下面是nodejs安装位置，尽量都在同一路径下</p><img src="/images/nvm/nvm4.png" alt="nvm安装" /><p>安装完成后命令行输入 nvm -v查看版本，查看切换版本时候要使用管理员权限</p><img src="/images/nvm/nvm5.png" alt="nvm安装" ><h3 id="nvm使用"><a href="#nvm使用" class="headerlink" title="nvm使用"></a>nvm使用</h3><img src="/images/nvm/nvm6.png" alt="nvm使用" >]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> nvm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2023/04/21/git/"/>
      <url>/2023/04/21/git/</url>
      
        <content type="html"><![CDATA[<img src="/images/git.png"  /><span id="more"></span><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul><li>git init：初始化 Git 仓库</li><li>git clone：克隆远程 Git 仓库到本地</li><li>git pull：从远程仓库拉取代码</li><li>git add -A：添加文件到暂存区</li><li>git commit -m ‘提交信息’：提交暂存区文件到 Git 仓库</li><li>git push：推送代码到远程仓库</li><li>git status：查看仓库状态</li><li>git diff：查看工作区和暂存区的差异</li><li>git log：查看提交历史</li><li>git branch：查看本地分支列表</li><li>git remote：查看远程仓库信息</li></ul><h3 id="配置操作"><a href="#配置操作" class="headerlink" title="配置操作"></a>配置操作</h3><ul><li>git config：查看、添加或修改 Git 配置</li><li>git config –global user.name<username>：设置 Git 全局用户邮箱</li><li>git config –system：修改系统级别 Git 配置</li><li>git config –local：修改当前仓库 Git 配置</li><li>git config –unset：删除 Git 配置项</li></ul><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li>git branch：查看分支列表</li><li>git branch <branchname>：创建分支</li><li>git branch -d <branchname>：删除本地分支</li><li>git checkout：切换分支</li><li>git merge：合并分支</li><li>git merge –no-ff：合并分支并保留分支历史</li><li>git push <remote> – delete <branchname>：删除远程分支</li></ul><h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><ul><li>git reset：撤销暂存区的所有修改</li><li>git reset <filename>：撤销暂存区指定文件的修改</li><li>git checkout – <filename>：撤销工作区指定文件的修改</li><li>git revert <commit>：撤销指定提交的修改</li><li>git reset –hard：重置工作区、暂存区和 Git 仓库状态</li></ul><h3 id="暂存操作"><a href="#暂存操作" class="headerlink" title="暂存操作"></a>暂存操作</h3><ul><li>git stash：将未提交的修改保存到 Git 的 stash 中，以便之后恢复或者应用</li><li>git stash save “message”：将未提交的修改保存到 Git 的 stash 中，并为当前的 stash 设置一个描述信息。描述信息可以帮助我们更好理解 stash 中保存的内容</li><li>git stash list：列出所有保存在 stash 中的修改。每个 stash 都有一个唯一的标识符，可用来区分不同的 stash</li><li>git stash apply <stash> ：将指定的 stash 应用到当前分支中，但是不会删除该 stash。如果要删除该 stash，需要使用 git stash drop 命令</li><li>git stash pop：将最近保存的 stash 应用到当前分支中，并删除该 stash。</li><li>git stash drop <stash>：删除指定的 stash</li><li>git stash clear：删除所有的 stash</li><li>git stash branch <branchname>：基于 stash 创建一个新的分支，并将该 stash 应用到新的分支中。新分支包含了 stash 中的所有修改</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自我介绍</title>
      <link href="/2023/04/18/tags/"/>
      <url>/2023/04/18/tags/</url>
      
        <content type="html"><![CDATA[<img src="/images/风筝.jpg" />一名前端开发工程师，热爱学习，接受新的知识<p>写博客的目的：<br>    一、记录自己的生活<br>    二、记录学习的知识<br>    三、希望大家能一起学习讨论</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

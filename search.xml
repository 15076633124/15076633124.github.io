<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>防抖节流的理解及实现</title>
      <link href="/2023/04/20/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/20/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="防抖：用户频发触发事件，只要最后一次事件的操作"><a href="#防抖：用户频发触发事件，只要最后一次事件的操作" class="headerlink" title="防抖：用户频发触发事件，只要最后一次事件的操作"></a>防抖：用户频发触发事件，只要最后一次事件的操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;input&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">input.<span class="property">oninput</span> = <span class="title function_">antiShake</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,<span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">antiShake</span>(<span class="params">fn,dealy</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> t = <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(t!==<span class="literal">null</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">clearTimeout</span>(t)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    t = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    fn.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,dealy)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="节流则是控制事件高频率触发"><a href="#节流则是控制事件高频率触发" class="headerlink" title="节流则是控制事件高频率触发"></a>节流则是控制事件高频率触发</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;input&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">input.<span class="property">oninput</span> = <span class="title function_">throttle</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,<span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,dealy</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> flag = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span>(flag)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fn.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          flag = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      flag = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制流处理方式</title>
      <link href="/2023/04/20/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%81/"/>
      <url>/2023/04/20/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="处理后端接口返回的二进制流"><a href="#处理后端接口返回的二进制流" class="headerlink" title="处理后端接口返回的二进制流"></a>处理后端接口返回的二进制流</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 接口示例: config参数里传类型（responseType：blob）</span></span><br><span class="line"> <span class="attr">yxExcelExport</span>: <span class="function">(<span class="params">url: string,data: object</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="property">httpObj</span>.<span class="title function_">post</span>(url + <span class="string">&#x27;/v1/excel/yxExcelExport&#x27;</span>,data,&#123;<span class="attr">responseType</span>:  <span class="string">&#x27;blob&#x27;</span>&#125;);</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(res.<span class="property">data</span>) <span class="comment">// 将二进制文件转换为可访问的url</span></span><br><span class="line"> <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line"> a.<span class="property">href</span> = url</span><br><span class="line"> a.<span class="property">download</span> = <span class="string">&#x27;影像数据.xls&#x27;</span> </span><br><span class="line"> a.<span class="title function_">click</span>()</span><br><span class="line"> <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 处理后端接口返回的二进制流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite和webpack的区别</title>
      <link href="/2023/04/20/vite%E4%B8%8Ewebpack%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/04/20/vite%E4%B8%8Ewebpack%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h2><p>一种新型前端构建工具，能够显著提升前端开发体验。它由两部分组成：</p><ul><li>开发服务器：它是基于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ES 模块</a> 提供了  <a href="https://cn.vitejs.dev/guide/features.html">丰富的内建功能</a>，例如  <a href="https://cn.vitejs.dev/guide/features.html#hot-module-replacement">模块热更新（HMR）</a> </li><li>一套构建指令，它基于 <a href="https://rollupjs.org/">Rollup</a> 打包代码，并且是预配置的，可输出于生产环境的高度优化过的静态资源</li></ul><p>Vite 提供开箱即用的配置，同时它的  <a href="https://cn.vitejs.dev/guide/api-plugin.html">插件 API</a>  和 <a href="https://cn.vitejs.dev/guide/api-javascript.html">JavaScript API</a> 带来了高度的可扩展性，并有完整的类型支持。</p><p><img src="/images/vite.png" alt="vite"></p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>本质上，<strong>webpack</strong> 是一个用于现代 JavaScript 应用程序的 <em>静态模块打包工具</em>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 <a href="https://webpack.docschina.org/concepts/dependency-graph/">依赖图(dependency graph)</a>，然后将你项目中所需的每一个模块组合成一个或多个 <em>bundles</em>，它们均为静态资源，用于展示你的内容。</p><p><img src="/images/webpack.png" alt="webpack"></p><h2 id="vite-和-webpack的区别"><a href="#vite-和-webpack的区别" class="headerlink" title="vite 和 webpack的区别"></a>vite 和 webpack的区别</h2><ul><li>vite 是一个快速构建工具，适用于小型项目和快速原型开发。它使用 ES模块作为开发模式，可以快速启动开发服务器，支持热更新和快速构建</li><li>webpack 是一个功能强大的构建工具，适用于大型项目和复杂的构建需求。它可以处理各种类型的文件，支持代码分割、懒加载、优化和压缩等功能，可以满足更多的构建需求</li><li>区别：Vite 和 Webpack都是 JavaScript 应用程序的构建工具，它们的共同目标都是将应用程序源代码转换为可部署的 JavaScript、HTML、CSS。<ul><li>构建方式<ul><li>Vite 是一种 “零配置” 构建工具，使用 Rollup 进行快速的开发环境构建，同时支持基于插件的定制。在开发模式下 Vite 使用 ES modules 来直接引入模块，而不是打包所有代码，因此启动时间非常快。生产模式下，Vite 会对所有模块进行打包和压缩</li><li>webpack 则需要一个配置文件来定义如何构建应用程序</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite和webpack的区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2023/04/20/git/"/>
      <url>/2023/04/20/git/</url>
      
        <content type="html"><![CDATA[<p><img src="https://w.wallhaven.cc/full/1p/wallhaven-1pd1o9.jpg"></p><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul><li>git init：初始化 Git 仓库</li><li>git clone：克隆远程 Git 仓库到本地</li><li>git pull：从远程仓库拉取代码</li><li>git add -A：添加文件到暂存区</li><li>git commit -m ‘提交信息’：提交暂存区文件到 Git 仓库</li><li>git push：推送代码到远程仓库</li><li>git status：查看仓库状态</li><li>git diff：查看工作区和暂存区的差异</li><li>git log：查看提交历史</li><li>git branch：查看本地分支列表</li><li>git remote：查看远程仓库信息</li></ul><h3 id="配置操作"><a href="#配置操作" class="headerlink" title="配置操作"></a>配置操作</h3><ul><li>git config：查看、添加或修改 Git 配置</li><li>git config –global user.name<username>：设置 Git 全局用户邮箱</li><li>git config –system：修改系统级别 Git 配置</li><li>git config –local：修改当前仓库 Git 配置</li><li>git config –unset：删除 Git 配置项</li></ul><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li>git branch：查看分支列表</li><li>git branch <branchname>：创建分支</li><li>git branch -d <branchname>：删除本地分支</li><li>git checkout：切换分支</li><li>git merge：合并分支</li><li>git merge –no-ff：合并分支并保留分支历史</li><li>git push <remote> – delete <branchname>：删除远程分支</li></ul><h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><ul><li>git reset：撤销暂存区的所有修改</li><li>git reset <filename>：撤销暂存区指定文件的修改</li><li>git checkout – <filename>：撤销工作区指定文件的修改</li><li>git revert <commit>：撤销指定提交的修改</li><li>git reset –hard：重置工作区、暂存区和 Git 仓库状态</li></ul><h3 id="暂存操作"><a href="#暂存操作" class="headerlink" title="暂存操作"></a>暂存操作</h3><ul><li>git stash：将未提交的修改保存到 Git 的 stash 中，以便之后恢复或者应用</li><li>git stash save “message”：将未提交的修改保存到 Git 的 stash 中，并为当前的 stash 设置一个描述信息。描述信息可以帮助我们更好理解 stash 中保存的内容</li><li>git stash list：列出所有保存在 stash 中的修改。每个 stash 都有一个唯一的标识符，可用来区分不同的 stash</li><li>git stash apply <stash> ：将指定的 stash 应用到当前分支中，但是不会删除该 stash。如果要删除该 stash，需要使用 git stash drop 命令</li><li>git stash pop：将最近保存的 stash 应用到当前分支中，并删除该 stash。</li><li>git stash drop <stash>：删除指定的 stash</li><li>git stash clear：删除所有的 stash</li><li>git stash branch <branchname>：基于 stash 创建一个新的分支，并将该 stash 应用到新的分支中。新分支包含了 stash 中的所有修改</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="/2023/04/20/nvm/"/>
      <url>/2023/04/20/nvm/</url>
      
        <content type="html"><![CDATA[<h2 id="nvm简介"><a href="#nvm简介" class="headerlink" title="nvm简介"></a>nvm简介</h2><p>nvm是node包管理工具，不同项目依赖的node会不相同，所以就需要在不同的项目下使用不同node版本</p><p>nvm就是一个比较方便的node管理工具，用来切换node版本</p><h2 id="nvm下载及安装"><a href="#nvm下载及安装" class="headerlink" title="nvm下载及安装"></a>nvm下载及安装</h2><h3 id="nvm下载"><a href="#nvm下载" class="headerlink" title="nvm下载"></a>nvm下载</h3><p>安装包下载地址: <a href="https://github.com/coreybutler/nvm-windows/releases">nvm下载地址</a>,windows系统下载nvm-setup.zip安装包<br><img src="/images/nvm/nvm1.png" alt="nvm"  /></p><h3 id="nvm安装"><a href="#nvm安装" class="headerlink" title="nvm安装"></a>nvm安装</h3><p>如果电脑之前存在node，先进行卸载，再解压nvm-setup.zip安装包，进入解压的文件夹，双击exe后缀文件进行安装</p><img src="/images/nvm/nvm2.png" alt="nvm"  /><p>下面界面选择nvm安装的路径,</p><img src="/images/nvm/nvm3.png" alt="nvm安装" /><p>下面是nodejs安装位置，尽量都在同一路径下</p><img src="/images/nvm/nvm4.png" alt="nvm安装" /><p>安装完成后命令行输入 nvm -v查看版本，查看切换版本时候要使用管理员权限</p><img src="/images/nvm/nvm5.png" alt="nvm安装" ><h3 id="nvm使用"><a href="#nvm使用" class="headerlink" title="nvm使用"></a>nvm使用</h3><img src="/images/nvm/nvm6.png" alt="nvm使用" >]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> nvm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自我介绍</title>
      <link href="/2023/04/18/tags/"/>
      <url>/2023/04/18/tags/</url>
      
        <content type="html"><![CDATA[<img src="/images/风筝.jpg" width="100%" height="500"  alt="风筝" align=left />一名前端开发工程师，热爱学习，接受新的知识<p>写博客的目的：<br>    一、记录自己的生活<br>    二、记录学习的知识<br>    三、希望大家能一起学习讨论</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
